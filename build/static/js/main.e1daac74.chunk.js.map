{"version":3,"sources":["Pokemon_dataList.js","DataList.js","App.js","reportWebVitals.js","index.js"],"names":["data","id","name","image","React","createElement","alt","height","width","src","cp","attack","defenceType","DataList","fetch","then","response","json","allpokemon","results","forEach","pokemon","url","pokeData","console","log","fetchPokemonData","colums","dataField","text","filter","textFilter","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","paginationTotalRenderer","from","to","size","className","disablePageTitle","sizePerPageList","value","length","BootstrapTable","bootstrap4","keyField","columns","rowStyle","row","rowIndex","style","filterFactory","pagination","paginationFactory","App","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e1daac74.chunk.js","sourcesContent":["import React  from 'react';\r\nconst data=\r\n[   \r\n    {\r\n        \"id\":1,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\" height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },\r\n    {\r\n        \"id\":2,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\" height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n    \r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":3,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\"height={50} width={50}src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":4,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\" height={50} width={50}src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":5,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\" height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":6,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\" height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":7,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\"height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":8,\r\n        \"name\":\"safa\",\r\n        \"image\":<img alt=\"404\" height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":9,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\"height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":10,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\" height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    },{\r\n        \"id\":11,\r\n        \"name\":\"pokemon1\",\r\n        \"image\":<img alt=\"404\"height={50} width={50} src=\"https://w7.pngwing.com/pngs/585/436/png-transparent-pokemon-pikachu-illustration-icon-pikachu-background-mammal-food-vertebrate-thumbnail.png\" />,\r\n\r\n        \"cp\":\"123\",\r\n        \"attack\":\"Lighting\",\r\n        \"defenceType\":\"123\"\r\n\r\n\r\n    }\r\n]\r\n\r\n\r\nexport default data;","import React from 'react';\r\nimport data from \"./Pokemon_dataList\"\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.css\";\r\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory ,{textFilter} from 'react-bootstrap-table2-filter';\r\nimport 'react-bootstrap-table2-filter/dist/react-bootstrap-table2-filter.min.css';\r\nimport \"./datalist.css\";\r\n\r\nexport default function DataList() {\r\n  function fetchKantoPokemon(){\r\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\r\n     .then(response => response.json())\r\n     .then(function(allpokemon){\r\n     allpokemon.results.forEach(function(pokemon){\r\n       fetchPokemonData(pokemon); \r\n     })\r\n    })\r\n   }\r\n   function fetchPokemonData(pokemon){\r\n    let url = pokemon.url // <--- this is saving the pokemon url to a      variable to us in a fetch.(Ex: https://pokeapi.co/api/v2/pokemon/1/)\r\n      fetch(url)\r\n      .then(response => response.json())\r\n      .then(function(pokeData){\r\n      console.log(pokeData)\r\n      })\r\n    }\r\n  fetchKantoPokemon();\r\n    const colums=[\r\n        {dataField:'id',text:\"Id\"},\r\n        {dataField:'name',text:\"Name\",filter:textFilter()},\r\n        {dataField:'image',text:\"Image\"},\r\n        {dataField:'cp',text:\"CP\"},\r\n        {dataField:'attack',text:\"Attack\"},\r\n        {dataField:'defenceType',text:\"Defence Type\"}\r\n    ]\r\n\r\n    const customTotal = (from, to, size) => (\r\n        <span className=\"react-bootstrap-table-pagination-total\">\r\n          Showing { from } to { to } of { size } Results\r\n        </span>\r\n      );\r\n      \r\n      const options = {\r\n        paginationSize: 4,\r\n        pageStartIndex: 0,\r\n        // alwaysShowAllBtns: true, // Always show next and previous button\r\n        // withFirstAndLast: false, // Hide the going to First and Last page button\r\n        // hideSizePerPage: true, // Hide the sizePerPage dropdown always\r\n        // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\r\n        firstPageText: 'First',\r\n        prePageText: 'Back',\r\n        nextPageText: 'Next',\r\n        lastPageText: 'Last',\r\n        nextPageTitle: 'First page',\r\n        prePageTitle: 'Pre page',\r\n        firstPageTitle: 'Next page',\r\n        lastPageTitle: 'Last page',\r\n        showTotal: true,\r\n        paginationTotalRenderer: customTotal,\r\n        disablePageTitle: true,\r\n        sizePerPageList: [{\r\n          text: '10', value: 10\r\n        }, {\r\n          text: '20', value: 20\r\n        }, {\r\n          text: 'All', value: data.length\r\n        }] // A numeric array is also available. the purpose of above example is custom the text\r\n      };\r\n\r\n      const rowStyle = (row, rowIndex) => {\r\n        const style = {};\r\n        style.padding=100;\r\n        return style;\r\n      };\r\n    return (\r\n        <BootstrapTable \r\n        bootstrap4 \r\n        keyField='id' \r\n        columns={colums} \r\n        data={data}\r\n        rowStyle={rowStyle\r\n        }\r\n        filter={filterFactory()}\r\n        pagination={ paginationFactory(options) }\r\n        />\r\n        // <table >\r\n        //     <tr>\r\n        //         <th>Id</th>\r\n        //         <th>Name</th>\r\n        //         <th>Image</th>\r\n        //         <th>CP</th>\r\n        //         <th>Attact</th> \r\n        //         <th>Defence Type</th>\r\n\r\n        //     </tr>\r\n        \r\n        //     {\r\n        //         data.map(t =>\r\n        //             <tr>\r\n\r\n        //             <td>{t.id}</td>\r\n        //             <td>{t.name}</td>\r\n        //             <td>{t.image}</td>\r\n        //             <td>{t.cp}</td>\r\n        //             <td>{t.attack}</td>                    \r\n        //             <td>{t.defenceType}</td>\r\n        //             </tr>\r\n        //         )\r\n        //     }\r\n        //     </table>\r\n    );\r\n}\r\n","import React from 'react';\nimport DataList from './DataList';\n\nexport default function App() {\n  return (\n    <>\n    <DataList/>\n    </>\n  );\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","  import React from 'react';\n  import ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n/* Pagination Component \n-------------------------------------------------*/\n\n// const propTypes = {\n//   items: React.PropTypes.array.isRequired,\n//   onChangePage: React.PropTypes.func.isRequired,\n//   initialPage: React.PropTypes.number    \n// }\n\n// const defaultProps = {\n//   initialPage: 1\n// }\n\n// class Pagination extends React.Component {\n//   constructor(props) {\n//       super(props);\n//       this.state = { \n//         pager: {}\n//       };\n//   }\n\n//   componentWillMount() {\n//       // set page if items array isn't empty\n//       if (this.props.items && this.props.items.length) {\n//           this.setPage(this.props.initialPage);\n//       }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//       // reset page if items array has changed\n//       if (this.props.items !== prevProps.items) {\n//           this.setPage(this.props.initialPage);\n//       }\n//   }\n\n//   setPage(page) {\n//       var items = this.props.items;\n//       var pager = this.state.pager;\n\n//       if (page < 1 || page > pager.totalPages) {\n//           return;\n//       }\n\n//       // get new pager object for specified page\n//       pager = this.getPager(items.length, page, 10, 10);\n\n//       // get new page of items from items array\n//       var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n\n//       // update state\n//       this.setState({ pager: pager });\n\n//       // call change page function in parent component\n//       this.props.onChangePage(pageOfItems);\n//   }\n\n//   getPager(totalItems, currentPage, pageSize, maxPagesToDisplay) {\n//       // default to first page\n//       currentPage = currentPage || 1;\n\n//       // default page size is 10\n//       pageSize = pageSize || 10;\n\n//       // default max pages to display is 10\n//       maxPagesToDisplay = maxPagesToDisplay || 10;\n    \n//       // calculate total pages\n//       var totalPages = Math.ceil(totalItems / pageSize);\n\n//       var startPage, endPage;\n//       if (totalPages <= maxPagesToDisplay) {\n//           // less than 10 total pages so show all\n//           startPage = 1;\n//           endPage = totalPages;\n//       } else {\n//           // more than 10 total pages so calculate start and end pages\n\n//           var halfwayPoint = Math.ceil(maxPagesToDisplay / 2);\n//           var pastHalfwayPoint = Math.floor(maxPagesToDisplay / 2) + 1;\n//           var beforeHalfwayPoint = halfwayPoint - 1;\n//           if (currentPage <= pastHalfwayPoint) {\n//               startPage = 1;\n//               endPage = maxPagesToDisplay;\n//           } else if (currentPage + beforeHalfwayPoint >= totalPages) {\n//               startPage = totalPages - (maxPagesToDisplay - 1);\n//               endPage = totalPages;\n//           } else {\n//               startPage = currentPage - halfwayPoint;\n//               endPage = currentPage + beforeHalfwayPoint;\n//           }\n//       }\n\n//       // calculate start and end item indexes\n//       var startIndex = (currentPage - 1) * pageSize;\n//       var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n//       // create an array of pages to ng-repeat in the pager control\n//       var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\n\n//       // return object with all pager properties required by the view\n//       return {\n//           totalItems: totalItems,\n//           currentPage: currentPage,\n//           pageSize: pageSize,\n//           totalPages: totalPages,\n//           startPage: startPage,\n//           endPage: endPage,\n//           startIndex: startIndex,\n//           endIndex: endIndex,\n//           pages: pages\n//       };\n//   }\n\n//   render() {\n//       var pager = this.state.pager;\n\n//       if (!pager.pages || pager.pages.length <= 1) {\n//           // don't display pager if there is only 1 page\n//           return null;\n//       }\n\n//       return (\n//           <ul className=\"pagination\">\n//               <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n//                   <a onClick={() => this.setPage(1)}>First</a>\n//               </li>\n//               <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n//                   <a onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n//               </li>\n//               {pager.pages.map((page, index) =>\n//                   <li key={index} className={pager.currentPage === page ? 'active' : ''}>\n//                       <a onClick={() => this.setPage(page)}>{page}</a>\n//                   </li>\n//               )}\n//               <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n//                   <a onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n//               </li>\n//               <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n//                   <a onClick={() => this.setPage(pager.totalPages)}>Last</a>\n//               </li>\n//           </ul>\n//       );\n//   }\n// }\n\n// Pagination.propTypes = propTypes;\n// Pagination.defaultProps = defaultProps;\n\n\n// /* App Component \n// -------------------------------------------------*/\n\n// class App extends React.Component {\n//   constructor() {\n//       super();\n\n//       // an example array of items to be paged\n//       var exampleItems = [...Array(250).keys()].map(i => (\n//         { \n//           id: (i+1), \n//           name: 'Item ' + (i+1),\n//           anotherProperty: 'Just another value for testing display'\n//         }\n//       ));\n\n//       this.state = {\n//           exampleItems: exampleItems,\n//           filteredItems: exampleItems, // It is not filtered by default.\n//           pageOfItems: []\n//       };\n\n//       // bind function in constructor instead of render (https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md)\n//       this.onChangePage = this.onChangePage.bind(this);\n    \n//       this.handleFilter = this.handleFilter.bind(this);\n//   }\n\n//   onChangePage(pageOfItems) {\n//       // update state with new page of items\n//       this.setState({ pageOfItems: pageOfItems });\n//   }\n\n//   handleFilter(e) {\n//     const inputValue = e.currentTarget.value.toString().toLowerCase();\n//     const newFilteredItems = this.state.exampleItems.filter(item => {\n//       const itemNameLowerCase = item.name.toLowerCase();\n//       return itemNameLowerCase.includes(inputValue);\n//     });\n    \n//     if (newFilteredItems.length === 0) { // The loop to display breaks when there's no match for the items so we need to do this\n//       newFilteredItems.push({id: 0, name: ''});\n//     }\n    \n//     this.setState({filteredItems: newFilteredItems });\n//   }\n\n//   render() {\n    \n//     let noResultsMessage = (this.state.filteredItems[0].id === 0) ? <div>No results found!</div> : '';\n    \n//     let tableDisplay = (this.state.filteredItems[0].id === 0) ? 'hidden' : '';\n    \n//       return (\n//           <div>\n//               <div className=\"container\">\n//                   <div className=\"text-center\">\n//                       <h1>React - Pagination Example with logic like Google</h1>\n                    \n//                       <input type=\"text\" placeholder=\"Filter items\" onInput={this.handleFilter} />\n                    \n//                       <div className={`table ${tableDisplay}`}>\n//                         <div className=\"row row--heading\">\n//                             <div className=\"item__id\">ID</div>\n//                             <div className=\"item__name\">Name</div>\n//                             <div className=\"item__description\">Description</div>\n//                         </div>\n                    \n//                       {\n//                         this.state.pageOfItems.map(item =>\n//                           <div key={item.id} className={`item--${item.id}\n// row`}>\n//                                <div className=\"item__id\">{item.id}</div>\n//                                <div className=\"item__name\">{item.name}</div>\n//                                <div className=\"item__description\">{item.anotherProperty}</div>\n//                           </div>\n//                        )\n//                       }\n                        \n//                       </div>\n                    \n//                     {noResultsMessage}\n                    \n//                       <Pagination items={this.state.filteredItems} onChangePage={this.onChangePage} />\n//                   </div>\n//               </div>\n//               <hr />\n//               <div className=\"credits text-center\">\n//                   <p>\n//                     Pagination with Filter - forked off:&nbsp;\n//                       <a href=\"http://jasonwatmore.com/post/2017/03/14/react-pagination-example-with-logic-like-google\" target=\"_top\">React - Pagination Example with Logic like Google</a>\n//                   </p>\n//               </div>\n//           </div>\n//       );\n//   }\n// }\n\n// /* Render Call\n// -------------------------------------------------*/\n// ReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}